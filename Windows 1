create table employee
( emp_ID int
, emp_NAME varchar(50)
, DEPT_NAME varchar(50)
, SALARY int);

insert into employee values(101, 'Mohan', 'Admin', 4000);
insert into employee values(102, 'Rajkumar', 'HR', 3000);
insert into employee values(103, 'Akbar', 'IT', 4000);
insert into employee values(104, 'Dorvin', 'Finance', 6500);
insert into employee values(105, 'Rohit', 'HR', 3000);
insert into employee values(106, 'Rajesh',  'Finance', 5000);
insert into employee values(107, 'Preet', 'HR', 7000);
insert into employee values(108, 'Maryam', 'Admin', 4000);
insert into employee values(109, 'Sanjay', 'IT', 6500);
insert into employee values(110, 'Vasudha', 'IT', 7000);
insert into employee values(111, 'Melinda', 'IT', 8000);
insert into employee values(112, 'Komal', 'IT', 10000);
insert into employee values(113, 'Gautham', 'Admin', 2000);
insert into employee values(114, 'Manisha', 'HR', 3000);
insert into employee values(115, 'Chandni', 'IT', 4500);
insert into employee values(116, 'Satya', 'Finance', 6500);
insert into employee values(117, 'Adarsh', 'HR', 3500);
insert into employee values(118, 'Tejaswi', 'Finance', 5500);
insert into employee values(119, 'Cory', 'HR', 8000);
insert into employee values(120, 'Monica', 'Admin', 5000);
insert into employee values(121, 'Rosalin', 'IT', 6000);
insert into employee values(122, 'Ibrahim', 'IT', 8000);
insert into employee values(123, 'Vikram', 'IT', 8000);
insert into employee values(124, 'Dheeraj', 'IT', 11000);
COMMIT;




select * from employee;
-- sum of employee salary in every department
--find employees whose salary is greater than the average salary in each department/ the whole company
with running_total (emp_id, emp_name, dept_name, salary, runningsum) AS
(
    select e.*, sum(salary) over ( partition by dept_name order by emp_id asc) as runningsum
      from employee e
),
avg_salary (average_running_sum) AS
(
      select avg(runningsum) over (partition by dept_name) as average_running_sum from running_total
)
select emp_id from running_total rt
join avg_salary av
on rt.runningsum=av.average_running_sum
where rt.runningsum>av.average_running_sum


-- Using Aggregate function as Window Function
-- Without window function, SQL will reduce the no of records.
select dept_name, max(salary) from employee
group by dept_name;

-- By using MAX as an window function, SQL will not reduce records but the result will be shown corresponding to each record.
select e.*,
max(salary) over(partition by dept_name) as max_salary
from employee e;


-- row_number(), rank() and dense_rank()
select *, row_number()over (partition by dept_name order by emp_id) from employee 

-- Fetch the first 2 employees from each department to join the company.--assuming the earlier you join, the lower your emp_id
select * from
(select *, row_number()over (partition by dept_name order by emp_id) as rowno from employee 
)x
where x.rowno <3


-- Fetch the top 3 employees in each department earning the max salary.--rank the employees according to salary
select * from
(select *, rank()over (partition by dept_name order by salary desc) as rank_no from employee 
)x
where x.rank_no <4



-- fetch a query to display if the salary of an employee is higher, lower or equal to the previous employee.
select e.*,
lag(salary) over(partition by dept_name order by emp_id) as prev_empl_sal,
case when e.salary > lag(salary) over(partition by dept_name order by emp_id) then 'Higher than previous employee'
     when e.salary < lag(salary) over(partition by dept_name order by emp_id) then 'Lower than previous employee'
	 when e.salary = lag(salary) over(partition by dept_name order by emp_id) then 'Same than previous employee' end as sal_range
from employee e;

--select the highest paid employee in each department
select *, 
first_value(emp_name) over (partition by dept_name order by salary desc) from employee
--OR
select * from 
(
select *, rank()over (partition by dept_name order by salary desc) as salary_rank from employee
) x
where x.salary_rank<2;

--select the least paid employee in each department
select *, 
last_value(emp_name) over (partition by dept_name order by salary desc range between unbounded preceding and unbounded following) 
from employee
--or
select * from 
(
    select *, rank()over (partition by dept_name order by salary asc) as salary_rank from employee
) x
where x.salary_rank<2;

--select the third most paid employee from each department
select *, 
case when x.category = 1 then 'highly paid employee'
     when x.category = 2 then 'medium paid employee'
	 when x.category = 3 then 'lowest paid employee'
	 END salary_category
from (
   select *, 
   ntile(3) over (partition by dept_name order by salary desc) as category
   from employee
 )x

